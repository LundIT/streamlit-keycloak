{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "LoginDialog.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">import { createEventDispatcher, getContext } from 'svelte';\nexport let loginUrl;\nconst createLoginPopup = () => {\n    if (currentPopup && !currentPopup.closed) {\n        currentPopup.focus();\n        return;\n    }\n    openPopup(loginUrl);\n    showPopup = true;\n};\nconst openPopup = (url) => {\n    const width = 400;\n    const height = 600;\n    const left = window.screenX + (window.innerWidth - width) / 2;\n    const top = window.screenY + (window.innerHeight - height) / 2;\n    currentPopup = window.open(url, 'keycloak:authorize:popup', `left=${left},top=${top},width=${width},height=${height},resizable,scrollbars=yes,status=1`);\n};\nconst runPopup = async (popup) => {\n    return new Promise((resolve, reject) => {\n        // Throw exception if popup is closed manually\n        const popupTimer = setInterval(() => {\n            if (popup.closed) {\n                window.removeEventListener('message', popupEventListener, false);\n                clearInterval(popupTimer);\n                reject(new Error(labels.errorPopupClosed));\n            }\n        }, 1000);\n        // Wait for postMessage from popup if login is successful\n        const popupEventListener = function (event) {\n            if (event.origin !== window.location.origin)\n                return;\n            if (!Object.keys(event.data).includes('code'))\n                return;\n            window.removeEventListener('message', popupEventListener, false);\n            clearInterval(popupTimer);\n            popup.close();\n            resolve(event.data);\n        };\n        window.addEventListener('message', popupEventListener);\n    });\n};\nconst authenticateWithPopup = async (popup) => {\n    if (!popup) {\n        throw new Error(labels.errorNoPopup);\n    }\n    await runPopup(popup);\n    dispatch('loggedin');\n};\nconst labels = getContext('localization');\nconst dispatch = createEventDispatcher();\nlet currentPopup;\nlet showPopup = false;\n</script>\n\n<style>\n    .login-container {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        height: 100vh;\n        background-color: #f8f9fa;\n        flex-direction: column;\n    }\n\n    .login-button {\n        font-size: 1.5rem;\n        padding: 1rem 2rem;\n    }\n\n    .error-message {\n        margin-top: 1rem;\n        color: #dc3545;\n    }\n</style>\n\n<div class=\"login-container\" on:loggedin>\n    <button type=\"button\" class=\"btn btn-primary login-button\" on:click={createLoginPopup}>\n        {labels.labelButton}\n    </button>\n    {#if showPopup}\n        {#await authenticateWithPopup(currentPopup) catch error}\n            <div class=\"error-message\">{error.message}</div>\n        {/await}\n    {/if}\n</div>\n"
  ],
  "names": [],
  "mappings": "AAuDI,gBAAgB,eAAC,CAAC,AACd,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,WAAW,CAAE,MAAM,CACnB,MAAM,CAAE,KAAK,CACb,gBAAgB,CAAE,OAAO,CACzB,cAAc,CAAE,MAAM,AAC1B,CAAC,AAED,aAAa,eAAC,CAAC,AACX,SAAS,CAAE,MAAM,CACjB,OAAO,CAAE,IAAI,CAAC,IAAI,AACtB,CAAC,AAED,cAAc,eAAC,CAAC,AACZ,UAAU,CAAE,IAAI,CAChB,KAAK,CAAE,OAAO,AAClB,CAAC"
}