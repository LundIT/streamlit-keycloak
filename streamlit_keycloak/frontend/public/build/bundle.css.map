{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "WithStreamlitConnection.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">import { onMount, onDestroy } from 'svelte';\nimport { Streamlit } from './streamlit';\n/**\n * Custom Streamlit component\n */\nexport let component;\n/**\n * Set to false if you want `args` (the named dictionary of arguments passed\n * from Python) to be passed as a dictionary to your component.\n *\n * Default is `true`.\n */\nexport let spreadArgs = true;\n// State\nlet renderData;\n// Props passed to custom Streamlit components.\n/** Named dictionary of arguments passed from Python.\n *  Arguments will be passed directly if `spreadArgs=true`\n */\nlet args;\n/** The component's width. */\nlet width;\n/**\n * True if the component should be disabled.\n * All components get disabled while the app is being re-run,\n * and become re-enabled when the re-run has finished.\n */\nlet disabled;\n// Loading state\nlet isLoading = true;\n/**\n * Streamlit is telling this component to redraw.\n * We save the render data in State, so that it can be passed to the\n * component.\n */\nconst onRenderEvent = (event) => {\n    // Update our state with the newest render data\n    console.log(event);\n    renderData = event.detail;\n    args = renderData.args;\n    disabled = renderData.disabled;\n    isLoading = false; // Set loading to false once data is received\n};\nonMount(() => {\n    // Set up event listeners, and signal to Streamlit that we're ready.\n    // We won't render the component until we receive the first RENDER_EVENT.\n    Streamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRenderEvent);\n    Streamlit.setComponentReady();\n});\nonDestroy(() => {\n    // Remove our `onRender` handler to Streamlit's render event.\n    Streamlit.events.removeEventListener(Streamlit.RENDER_EVENT, onRenderEvent);\n});\n</script>\n\n<svelte:window bind:innerWidth={width} />\n\n<!-- Show Loading Spinner until the component is ready -->\n{#if isLoading}\n    <div class=\"spinner\">Loading...</div>\n{:else if renderData}\n    <!-- Render Component -->\n    {#if spreadArgs}\n        <svelte:component this={component} {...args} {disabled} {width} />\n    {:else}\n        <svelte:component this={component} {args} {disabled} {width} />\n    {/if}\n{/if}\n\n<style>\n    .spinner {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        height: 100vh;\n        font-size: 1.5em;\n    }\n</style>\n"
  ],
  "names": [],
  "mappings": "AAsEI,QAAQ,eAAC,CAAC,AACN,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,WAAW,CAAE,MAAM,CACnB,MAAM,CAAE,KAAK,CACb,SAAS,CAAE,KAAK,AACpB,CAAC"
}