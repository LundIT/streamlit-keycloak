{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "LoginDialog.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">import { createEventDispatcher, getContext } from 'svelte';\nexport let loginUrl;\nexport let loginPage = { background: '', logo: '' };\nconst createLoginPopup = () => {\n    if (currentPopup && !currentPopup.closed) {\n        currentPopup.focus();\n        return;\n    }\n    openPopup(loginUrl);\n    showPopup = true;\n};\nconst openPopup = (url) => {\n    const width = 400;\n    const height = 600;\n    const left = window.screenX + (window.innerWidth - width) / 2;\n    const top = window.screenY + (window.innerHeight - height) / 2;\n    currentPopup = window.open(url, 'keycloak:authorize:popup', `left=${left},top=${top},width=${width},height=${height},resizable,scrollbars=yes,status=1`);\n};\nconst runPopup = async (popup) => {\n    return new Promise((resolve, reject) => {\n        // Throw exception if popup is closed manually\n        const popupTimer = setInterval(() => {\n            if (popup.closed) {\n                window.removeEventListener('message', popupEventListener, false);\n                clearInterval(popupTimer);\n                reject(new Error(labels.errorPopupClosed));\n            }\n        }, 1000);\n        // Wait for postMessage from popup if login is successful\n        const popupEventListener = function (event) {\n            if (event.origin !== window.location.origin)\n                return;\n            if (!Object.keys(event.data).includes('code'))\n                return;\n            window.removeEventListener('message', popupEventListener, false);\n            clearInterval(popupTimer);\n            popup.close();\n            resolve(event.data);\n        };\n        window.addEventListener('message', popupEventListener);\n    });\n};\nconst authenticateWithPopup = async (popup) => {\n    if (!popup) {\n        throw new Error(labels.errorNoPopup);\n    }\n    await runPopup(popup);\n    dispatch('loggedin');\n};\nconst labels = getContext('localization');\nconst dispatch = createEventDispatcher();\nlet currentPopup;\nlet showPopup = false;\n</script>\n\n<style>\n    .background {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background-size: cover;\n        background-position: center;\n        z-index: -1;\n    }\n\n    .logo {\n        position: absolute;\n        max-width: 200px;\n    }\n\n    .login-container {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -40%);\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n    }\n\n</style>\n\n<div on:loggedin>\n    {#if loginPage.background}\n        <div class=\"background\" style=\"background-image: url({loginPage.background});\"></div>\n    {/if}\n    <div class=\"login-container\">\n        {#if loginPage.logo}\n            <img class=\"logo\" src={loginPage.logo} alt=\"Logo\" />\n        {/if}\n        <button type=\"button\" class=\"btn btn-primary login-button\" on:click={createLoginPopup}>\n            <span>{labels.labelButton}</span>\n        </button>\n    </div>\n    {#if showPopup}\n        {#await authenticateWithPopup(currentPopup) catch error}\n            <div class=\"alert alert-danger mt-3 mb-0\">{error.message}</div>\n        {/await}\n    {/if}\n</div>\n"
  ],
  "names": [],
  "mappings": "AAwDI,WAAW,cAAC,CAAC,AACT,QAAQ,CAAE,KAAK,CACf,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,eAAe,CAAE,KAAK,CACtB,mBAAmB,CAAE,MAAM,CAC3B,OAAO,CAAE,EAAE,AACf,CAAC,AAED,KAAK,cAAC,CAAC,AACH,QAAQ,CAAE,QAAQ,CAClB,SAAS,CAAE,KAAK,AACpB,CAAC,AAED,gBAAgB,cAAC,CAAC,AACd,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,GAAG,CACR,IAAI,CAAE,GAAG,CACT,SAAS,CAAE,UAAU,IAAI,CAAC,CAAC,IAAI,CAAC,CAChC,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,MAAM,AAC3B,CAAC"
}