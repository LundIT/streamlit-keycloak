{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "Keycloak.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">import LoginDialog from './LoginDialog.svelte';\nimport { afterUpdate, onMount, setContext } from 'svelte';\nimport { Streamlit } from './streamlit';\nimport Keycloak from 'keycloak-js';\nimport { defaultLabels } from './localization';\nexport let url;\nexport let realm;\nexport let clientId;\nexport let autoRefresh = true;\nexport let initOptions = {};\nexport let loginOptions = {};\nexport let customLabels = {};\nexport let loginPage = { background: \"\", logo: \"\" };\nconst rewritePage = (newPage) => {\n    return (window.location.origin +\n        window.location.pathname.replace(/\\/[^/]*$/, newPage));\n};\nconst getLoginUrl = () => {\n    return keycloak.createLoginUrl({\n        ...loginOptions,\n        redirectUri: rewritePage('/login.html')\n    });\n};\n// Set up the response to Streamlit\nconst setComponentValue = async () => {\n    if (!keycloak.userInfo && keycloak.authenticated) {\n        await keycloak.loadUserInfo();\n    }\n    let value;\n    if (keycloak.authenticated) {\n        value = {\n            authenticated: true,\n            access_token: keycloak.token,\n            refresh_token: keycloak.refreshToken,\n            user_info: keycloak.userInfo,\n            id_token: keycloak.idToken,\n        };\n    }\n    else {\n        value = { authenticated: false };\n    }\n    Streamlit.setComponentValue(value);\n};\n// Set up Keycloak events listeners to send state to Steamlit\nconst setKeycloakEventListeners = (autoRefresh) => {\n    keycloak.onAuthError = async () => await setComponentValue();\n    keycloak.onAuthRefreshError = async () => await setComponentValue();\n    keycloak.onAuthSuccess = async () => await setComponentValue();\n    keycloak.onAuthRefreshSuccess = async () => await setComponentValue();\n    keycloak.onTokenExpired = async () => {\n        if (!autoRefresh || !keycloak.refreshToken)\n            return;\n        await keycloak.updateToken(10);\n    };\n};\nconst authenticate = async () => {\n    keycloak = new Keycloak({\n        url: url,\n        realm: realm,\n        clientId: clientId,\n    });\n    setKeycloakEventListeners(autoRefresh);\n    // Check if user is already logged in\n    return keycloak.init({\n        ...initOptions,\n        onLoad: 'check-sso',\n        silentCheckSsoRedirectUri: rewritePage('/check-sso.html'),\n    });\n};\nonMount(() => {\n    Streamlit.setFrameHeight();\n});\nafterUpdate(() => {\n    Streamlit.setFrameHeight(clientHeight);\n});\nlet keycloak;\nlet clientHeight;\nconst labels = {\n    ...defaultLabels,\n    ...customLabels,\n};\nsetContext('localization', labels);\n</script>\n\n<style>\n   .block-container {\n     padding-right: 0;\n     padding-left: 0;\n     padding-bottom: 0;\n     height: calc(100vh - 160px);\n   }\n    .background {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background-size: cover;\n        background-position: center;\n        z-index: -1;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        gap: 10rem;\n    }\n\n    .logo {\n        max-width: 200px;\n    }\n\n</style>\n\n\n<div bind:clientHeight>\n    {#await authenticate() then authenticated}\n        {#if !authenticated}\n        <div class=\"background\" style=\"background-image: url({loginPage.background});\">\n            <div>\n                <img class=\"logo\" src={loginPage.logo} alt=\"Logo\" />\n            </div>\n            <LoginDialog\n                loginUrl={getLoginUrl()}\n                on:loggedin={() => {\n                    keycloak.login(loginOptions)\n                }}\n                loginPage={loginPage}\n            />\n        </div>\n        {/if}\n    {:catch exception}\n        <div class=\"alert alert-danger\">\n            <span>{labels.errorFatal}</span>\n            <br />\n            <span>{exception.error}</span>\n        </div>\n    {/await}\n</div>\n"
  ],
  "names": [],
  "mappings": "AA2FI,WAAW,cAAC,CAAC,AACT,QAAQ,CAAE,KAAK,CACf,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,eAAe,CAAE,KAAK,CACtB,mBAAmB,CAAE,MAAM,CAC3B,OAAO,CAAE,EAAE,CACX,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,MAAM,CACvB,GAAG,CAAE,KAAK,AACd,CAAC,AAED,KAAK,cAAC,CAAC,AACH,SAAS,CAAE,KAAK,AACpB,CAAC"
}